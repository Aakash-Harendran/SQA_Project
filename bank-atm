#!/usr/bin/env python3
import sys
import os

def read_and_parse_accounts(account_file):
    accounts = {}
    try:
        with open(account_file, 'r') as file:
            while True:
                line = file.readline()
                if not line:
                    break
                line = line.rstrip() 

                if "END_OF_FILE" in line:
                    break

                account_num = line[0:5]
                name = line[6:26].strip().replace('_', ' ')
                status = line[27:28].strip() 
                balance_str = line[29:].strip()

                # Add validation for malformed lines
                if len(account_num) != 5 or not account_num.isdigit():
                    print(f"Error: Invalid account number '{account_num}'")
                    continue

                try:
                    balance = float(balance_str.split('_')[-1])
                except ValueError:
                    print(f"Error: Invalid balance format for account {account_num}. Balance: '{balance_str}'")
                    continue

                accounts[account_num] = {
                    "name": name,
                    "status": status,
                    "balance": balance
                }

    except Exception as e:
        print(f"Error reading accounts from {account_file}: {e}")

    return accounts

# Front End System and Transaction classes (as you already have)
class FrontEndSystem:
    def __init__(self, output_file):
        self.session_type = None
        self.logged_in = False
        self.transaction_logger = TransactionLogger(output_file)

    def start_session(self, session_type):
        self.session_type = session_type
        self.logged_in = True
        self.transaction_logger.log_message(f"Session started as {self.session_type}")

    def process_transaction(self, transaction_code, *args):
        if not self.logged_in:
            self.transaction_logger.log_message("Error: You must log in before performing any transactions.")
            return

        if transaction_code == "login":
            if Login().authenticate_user(*args):
                self.transaction_logger.log_message("Login successful")
            else:
                self.transaction_logger.log_message("Error: Invalid login details.")
        elif transaction_code == "withdraw":
            Withdraw().withdraw_amount(*args, self.transaction_logger)
        elif transaction_code == "transfer":
            Transfer().transfer_funds(*args, self.transaction_logger)
        elif transaction_code == "paybill":
            PayBill().pay_bill(*args, self.transaction_logger)
        elif transaction_code == "deposit":
            Deposit().deposit_funds(*args, self.transaction_logger)
        elif transaction_code == "create":
            CreateAccount().create_new_account(*args, self.transaction_logger)
        elif transaction_code == "delete":
            DeleteAccount().remove_account(*args, self.transaction_logger)
        elif transaction_code == "disable":
            DisableAccount().disable_bank_account(*args, self.transaction_logger)
        elif transaction_code == "changeplan":
            ChangePlan().change_transaction_plan(*args, self.transaction_logger)
        elif transaction_code == "logout":
            self.end_session()
        else:
            self.transaction_logger.log_message(f"Error: Invalid transaction code {transaction_code}")

    def end_session(self):
        self.logged_in = False
        self.session_type = None
        self.transaction_logger.log_message("Session ended.")

class TransactionLogger:
    def __init__(self, output_file):
        self.output_file = output_file

    def log_message(self, message):
        print(message)  # Print to terminal
        with open(self.output_file, "a") as f:
            f.write(message + "\n")

class Login:
    def authenticate_user(self, session_type, account_name=None, accounts_data=None):
        if session_type == "admin":
            return True  # Admin always authenticated
        if session_type == "standard" and account_name in accounts_data:
            return True
        return False  # Default to unsuccessful login

class Withdraw:
    def withdraw_amount(self, account_number, amount, balance, logger):
        if amount > 500:
            logger.log_message("Error: Withdrawal limit exceeded.")
            return
        if amount > balance:
            logger.log_message("Error: Insufficient balance.")
            return
        balance -= amount
        logger.log_message(f"Successfully withdrew ${amount}. New balance: ${balance}")

class Transfer:
    def transfer_funds(self, from_account, to_account, amount, logger):
        logger.log_message(f"Transferred ${amount} from {from_account} to {to_account}")

class PayBill:
    def pay_bill(self, account_number, biller, amount, logger):
        logger.log_message(f"Paid ${amount} to {biller} from account {account_number}")

class Deposit:
    def deposit_funds(self, account_number, amount, logger):
        logger.log_message(f"Deposited ${amount} into account {account_number}")

class CreateAccount:
    def create_new_account(self, name, balance, logger):
        logger.log_message(f"Created new account for {name} with balance ${balance}")

class DeleteAccount:
    def remove_account(self, account_number, logger):
        logger.log_message(f"Deleted account {account_number}")

class DisableAccount:
    def disable_bank_account(self, account_number, logger):
        logger.log_message(f"Disabled account {account_number}")

class ChangePlan:
    def change_transaction_plan(self, account_number, plan, logger):
        logger.log_message(f"Changed plan for {account_number} to {plan}")

# Main function to handle multiple test cases
def main():
    if len(sys.argv) != 3:
        print("Usage: python bank_atm.py <output_file> <account_file>")
        sys.exit(1)

    output_file = sys.argv[1]
    account_file = sys.argv[2]

    # Load account data from the specified file
    accounts_data = read_and_parse_accounts(account_file)

    # Get the list of input files from the Inputs folder
    input_folder = "Tests/Inputs"
    
    # Check if the Inputs folder exists
    if not os.path.exists(input_folder):
        print(f"Error: The folder '{input_folder}' does not exist.")
        sys.exit(1)

    input_files = [f for f in os.listdir(input_folder) if f.endswith(".inp")]

    if not input_files:
        print(f"Error: No input files found in the '{input_folder}' directory.")
        sys.exit(1)

    # Process each .imp file in the Inputs folder
    for input_file in input_files:
        input_path = os.path.join(input_folder, input_file)
        print(f"\nProcessing test case: {input_file}")
        
        # Process each input file
        frontend = FrontEndSystem(output_file)

        with open(input_path, "r") as f:
            for line in f:
                parts = line.strip().split()
                if len(parts) == 0:
                    continue
                command = parts[0]
                args = parts[1:]
                frontend.process_transaction(command, *args)

if __name__ == "__main__":
    main()